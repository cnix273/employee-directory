[{"/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/index.js":"1","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/App.js":"2","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/Footer/index.js":"3","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/Wrapper/index.js":"4","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/utils/API.js":"5","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/Container/index.js":"6","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/SearchForm/index.js":"7","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/SearchResults/index.js":"8","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/Main/index.js":"9"},{"size":215,"mtime":1615311984778,"results":"10","hashOfConfig":"11"},{"size":416,"mtime":1617317483114,"results":"12","hashOfConfig":"11"},{"size":205,"mtime":1616360422470,"results":"13","hashOfConfig":"11"},{"size":163,"mtime":1601401637000,"results":"14","hashOfConfig":"11"},{"size":154,"mtime":1617345043961,"results":"15","hashOfConfig":"11"},{"size":165,"mtime":1615318267847,"results":"16","hashOfConfig":"11"},{"size":802,"mtime":1617349275241,"results":"17","hashOfConfig":"11"},{"size":1178,"mtime":1617347020751,"results":"18","hashOfConfig":"11"},{"size":2721,"mtime":1617349647692,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kq2usy",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/index.js",[],"/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/App.js",[],"/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/Footer/index.js",[],"/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/Wrapper/index.js",[],"/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/utils/API.js",["41"],"import axios from \"axios\";\n\nexport default {\n  getEmployeeList: function() {\n    return axios.get(\"https://randomuser.me/api/?results=50&nat=us\");\n  }\n};\n","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/Container/index.js",[],"/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/SearchForm/index.js",[],"/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/SearchResults/index.js",["42"],"import React from \"react\";\nimport Container from \"../../components/Container\";\nimport \"./style.css\";\n\nfunction SearchResults(props) {\n  return (\n    <Container style={{ minHeight: \"80%\" }} className=\"container\">\n      <div className=\"searchResults\">\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\" className=\"header\">Picture</th>\n              <th scope=\"col\" className=\"header\">Name</th>\n              <th scope=\"col\" className=\"header\">Email</th>\n              <th scope=\"col\" className=\"header\">Phone Number</th>\n              <th scope=\"col\" className=\"header\">DOB</th>\n            </tr>\n          </thead>\n          <tbody>\n            {props.employees.map((employee) => {\n              return(<tr>\n                <td><img src={employee.picture.medium}></img></td>\n                <td className=\"name\">{employee.name.first} {employee.name.last}</td>\n                <td>{employee.email}</td>\n                <td>{employee.phone}</td>\n                <td>{employee.dob.date}</td>\n              </tr>)\n            })} \n          </tbody>\n        </table>\n      </div>\n    </Container>\n  );\n}\n\nexport default SearchResults;\n","/Users/cnix/Desktop/Coding_Bootcamp/employee-directory/src/components/Main/index.js",["43","44","45"],"import React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport SearchForm from \"../SearchForm\";\nimport SearchResults from \"../SearchResults\";\n\nclass Search extends Component {\n  state = {\n    employees: [],\n    filteredEmployees: []\n  };\n\n  // When the component mounts, get a list of all employees and update this.state.employees\n  componentDidMount() {\n    API.getEmployeeList()\n      .then(res => {\n          const employees = res.data.results;\n          employees.map(employee => {\n            employee.dob.date = employee.dob.date.split(\"T\")[0];\n            employee.dob.date = employee.dob.date.split(\"-\").reverse().join(\"-\");\n          })\n          this.setState({\n            employees: employees,\n            filteredEmployees: employees\n          })\n      })\n      .catch(err => console.log(err));\n  }\n  \n  // Setting state to search value\n  handleInputChange = event => {\n    // Setting target value to searchParam variable\n    let searchParam = event.target.value.toLowerCase();\n    \n    const employees = this.state.employees\n\n    const filteredList = [];\n   \n    // Filter employees array in state by name based on searchParam\n    employees.filter(employee => {\n      if (employee.name.first.toLowerCase().search(searchParam) !== -1 || employee.name.last.toLowerCase().search(searchParam) !== -1) \n      {filteredList.push(employee)}\n    });\n   \n    // Set employees array in state equal to new filtered list of employees\n    this.setState({\n      filteredEmployees: filteredList\n    });\n\n  };\n\n  // Sort employees array alphabetically\n  handleSort = event => {\n    event.preventDefault();\n\n    // Get employees from state\n    const sortedEmployees = this.state.filteredEmployees\n\n    // Sort employees by first name and if they have the same first name then last name\n    sortedEmployees.sort((a,b) => {\n      let fa = a.name.first.toLowerCase();\n      let fb = b.name.first.toLowerCase();\n      let la = a.name.last.toLowerCase();\n      let lb = b.name.last.toLowerCase();\n\n      if (fa < fb) {\n        return -1;\n      }\n\n      if (fa > fb) {\n        return 1;\n      }\n      \n      if (fa = fb) {\n        if (la < lb) {\n          return -1;\n        }\n  \n        if (la > lb) {\n          return 1;\n        }\n      }\n\n      return 0;\n\n    })\n\n    // Set state with sorted employees\n    this.setState({filteredEmployees: sortedEmployees});\n  }\n\n  render() {\n    return (\n      <div>\n        <SearchForm\n            handleInputChange={this.handleInputChange}\n            handleSort={this.handleSort}\n            search={this.state.search}\n        />\n        <SearchResults\n            employees={this.state.filteredEmployees}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Search;\n",{"ruleId":"46","severity":1,"message":"47","line":3,"column":1,"nodeType":"48","endLine":7,"endColumn":3},{"ruleId":"49","severity":1,"message":"50","line":22,"column":21,"nodeType":"51","endLine":22,"endColumn":56},{"ruleId":"52","severity":1,"message":"53","line":17,"column":34,"nodeType":"54","messageId":"55","endLine":17,"endColumn":36},{"ruleId":"52","severity":1,"message":"56","line":39,"column":31,"nodeType":"54","messageId":"55","endLine":39,"endColumn":33},{"ruleId":"57","severity":1,"message":"58","line":73,"column":11,"nodeType":"59","messageId":"60","endLine":73,"endColumn":18},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a return value from arrow function.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing"]